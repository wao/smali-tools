options{
    language="Cpp";
}

class SmaliLexer extends Lexer;
options{
    k=2;
}

tokens{
    PUBLIC = "public";
    PRIVATE = "private";
    FINAL = "final";
    METHOD_STR = "method";
    CONSTRUCTOR = "constructor";
}
CLASS : ".class";
SUPER : ".super";
SOURCE : ".source";
IMPLEMENTS : ".implements";
FIELDS : ".field";
METHOD : ".method";
LOCALS : ".locals";
PROLOGUE : ".prologue";
LINE : ".line";
END : ".end";

WS : ( ' ' | '\t' | '\n' { newline(); } | '\r' )+
     { $setType(antlr::Token::SKIP); }
   ;

COMMENT : '#' (
                  options {
                  generateAmbigWarnings=false;
                  } :
                  { LA(1) != '\n' }? . 
              )* '\n';

STRING : DOUBLE_QUOTATION_MARK! (
                 options {
                 generateAmbigWarnings=false;
                 } :
                 { LA(1) != '"' }? .
                 )* DOUBLE_QUOTATION_MARK!;

SLASH : '/';

SEMICOLON : ';'; 
protected

CHAR : 'a'..'z' | 'A'..'Z';
DIGIT : '0'..'9';
ID : ( '_' | CHAR ) ( CHAR | DIGIT | '_' | '$' )*;
DOUBLE_QUOTATION_MARK : '"';

class SmaliParser extends Parser;

classDecl : CLASS visualDecl className;
superDecl : SUPER className;
className : ID ( SLASH ID )* SEMICOLON;

protected
visualDecl : PUBLIC  | PRIVATE;
